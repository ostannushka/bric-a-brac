{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Исследование надёжности заёмщиков\n",
    "\n",
    "Заказчик — кредитный отдел банка. Нужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Входные данные от банка — статистика о платёжеспособности клиентов.\n",
    "\n",
    "Результаты исследования будут учтены при построении модели **кредитного скоринга** — специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 1. Откройте файл с данными и изучите общую информацию"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>children</th>\n",
       "      <th>days_employed</th>\n",
       "      <th>dob_years</th>\n",
       "      <th>education</th>\n",
       "      <th>education_id</th>\n",
       "      <th>family_status</th>\n",
       "      <th>family_status_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>income_type</th>\n",
       "      <th>debt</th>\n",
       "      <th>total_income</th>\n",
       "      <th>purpose</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-8437.673028</td>\n",
       "      <td>42</td>\n",
       "      <td>высшее</td>\n",
       "      <td>0</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>253875.639453</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>-4024.803754</td>\n",
       "      <td>36</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>112080.014102</td>\n",
       "      <td>приобретение автомобиля</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>-5623.422610</td>\n",
       "      <td>33</td>\n",
       "      <td>Среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>145885.952297</td>\n",
       "      <td>покупка жилья</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>-4124.747207</td>\n",
       "      <td>32</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0</td>\n",
       "      <td>M</td>\n",
       "      <td>сотрудник</td>\n",
       "      <td>0</td>\n",
       "      <td>267628.550329</td>\n",
       "      <td>дополнительное образование</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>340266.072047</td>\n",
       "      <td>53</td>\n",
       "      <td>среднее</td>\n",
       "      <td>1</td>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>1</td>\n",
       "      <td>F</td>\n",
       "      <td>пенсионер</td>\n",
       "      <td>0</td>\n",
       "      <td>158616.077870</td>\n",
       "      <td>сыграть свадьбу</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   children  days_employed  dob_years education  education_id  \\\n",
       "0         1   -8437.673028         42    высшее             0   \n",
       "1         1   -4024.803754         36   среднее             1   \n",
       "2         0   -5623.422610         33   Среднее             1   \n",
       "3         3   -4124.747207         32   среднее             1   \n",
       "4         0  340266.072047         53   среднее             1   \n",
       "\n",
       "      family_status  family_status_id gender income_type  debt   total_income  \\\n",
       "0   женат / замужем                 0      F   сотрудник     0  253875.639453   \n",
       "1   женат / замужем                 0      F   сотрудник     0  112080.014102   \n",
       "2   женат / замужем                 0      M   сотрудник     0  145885.952297   \n",
       "3   женат / замужем                 0      M   сотрудник     0  267628.550329   \n",
       "4  гражданский брак                 1      F   пенсионер     0  158616.077870   \n",
       "\n",
       "                      purpose  \n",
       "0               покупка жилья  \n",
       "1     приобретение автомобиля  \n",
       "2               покупка жилья  \n",
       "3  дополнительное образование  \n",
       "4             сыграть свадьбу  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      "children            21525 non-null int64\n",
      "days_employed       19351 non-null float64\n",
      "dob_years           21525 non-null int64\n",
      "education           21525 non-null object\n",
      "education_id        21525 non-null int64\n",
      "family_status       21525 non-null object\n",
      "family_status_id    21525 non-null int64\n",
      "gender              21525 non-null object\n",
      "income_type         21525 non-null object\n",
      "debt                21525 non-null int64\n",
      "total_income        19351 non-null float64\n",
      "purpose             21525 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('data.csv')\n",
    "display(df.head())\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В датасете 21525 строк и 12 столбцов. В столбцах days_employed и total_income есть пропуски. Столбцы children, days_employed, dob_years, total_income содержат количественные значения, столбцы education,\teducation_id, family_status, family_status_id, gender, income_type,\tdebt и purpose - категориальные. В столбце 'days_employed'(общий трудовой стаж в днях) встречаются отрицательные значения, а некоторые значения, если перевести дни в годы значительно превышают возраст клиентов банка. Учитывая неправдоподобность данных в столбце 'days_employed', а также отсутствие очевидной закономерности в ошибках в данных, можно сделать вывод, что данные не пригодны для анализа - однако, если этого требует задание, можно попробовать перевести отрицательные значения в положительные, а для значений стажа, которые превышают возраст, сдвигать зяпятую в дроби, пока стаж не станет меньше возраста.  В столбце purpose много неявных дубликатов, т.к. одна и та же цель сформулирована по-разному"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 2. Предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка пропусков"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#display(df[df['days_employed'].isna()].head()) #как правило, пропуски в столбцах days_employed и total_income совпадают\n",
    "#display(len(df[df['days_employed'].isna()])) # их 2174, поэтому лучше не выбрасывать, а заполнять.\n",
    "# Сначала нужно разобраться с некорректностью данных в столбце days_employed:\n",
    "df['days_employed'] = df['days_employed'].apply(abs) # сделаем из отрицательных значений положительные\n",
    "# попытаемся разделить неправдоподобные значения столбца days_employed на 100\n",
    "df.loc[df.loc[:,'days_employed'] / 365 > df['dob_years'], 'days_employed'] = df.loc[df.loc[:,'days_employed'] / 365 > df['dob_years']]['days_employed'] / 100\n",
    "#display(df.loc[df.loc[:,'days_employed'] / 365 > df['dob_years']]) # проверим себя, код работает правильно, но обнаружена ещё одна проблема в данных - у некоторых представителей выборки возраст = 0\n",
    "#учитывая, что ни столбец \"days_employed\", ни \"dob_years\", ни \"income_type\" в анализе не учавствуют, можно смело заполнять пропуски средними значениями\n",
    "# ну и заполним пропуски средними значениями по типу занятости\n",
    "mean_values = df.groupby('income_type').mean() #таблица со средними значениями\n",
    "mean_values = mean_values.reset_index() # столбец income_type стал индексом, нужно исправить\n",
    "income_types = list(df['income_type'].unique()) # список вариантов типов занятостей\n",
    "\n",
    "for elem in income_types:\n",
    "    filler = float(mean_values[mean_values['income_type'] == elem]['total_income'])\n",
    "    to_fill = df.loc[df['income_type'] == elem, 'total_income']\n",
    "    df.loc[df['income_type'] == elem, 'total_income'] = to_fill.fillna(filler)\n",
    "# теперь сделаем такой же цикл для days_employed\n",
    "for elem in income_types:\n",
    "    filler = float(mean_values[mean_values['income_type'] == elem]['days_employed'])\n",
    "    to_fill = df.loc[df['income_type'] == elem, 'days_employed']\n",
    "    df.loc[df['income_type'] == elem, 'days_employed'] = to_fill.fillna(filler)\n",
    "    \n",
    "# display(df[df['dob_years'] == 0]) а ещё тут у 101 человека возраст = 0 лет\n",
    "for elem in income_types:\n",
    "    filler = float(mean_values[mean_values['income_type'] == elem]['dob_years'])\n",
    "    df.loc[(df['income_type'] == elem) & (df['dob_years'] == 0), 'dob_years'] = filler\n",
    "    \n",
    "# количество детей в некоторых строках отрицательное, это тоже можно исправить через модуль\n",
    "#display(df[df['children'] < 0])\n",
    "df['children'] = df['children'].apply(abs) \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски есть в двух столбцах: days_employed и total_income, их 2174, кроме того данные в столбце days_employed настолько неправдоподобны, что лучше бы его совсем убрать из таблицы и не анализировать. С другой стороны, в поставленной задаче и не требуется использовать их для ответа на ключевые вопросы, поэтому я попробовала привести их в правдоподобный вид. Отрицательные значения превратились в положительные с помощью .apply(abs). Одна из возможных причин невероятно высоких значений трудового стажа - сдвинутая запятая в дробях, примерно на 2 позиции. Чтобы вычленить эти \"выбросы\" из датафрейма, я применила фильтр \"df.loc[:,'days_employed'] / 365 > df['dob_years']\", т.е. выделила строки, где стаж в годах превышает возраст, а затем разделила полученные значения на 100. \n",
    "Затем заполнила пропуски средними зачениями по каждой из \"income_type\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Замена типа данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21525 entries, 0 to 21524\n",
      "Data columns (total 12 columns):\n",
      "children            21525 non-null int64\n",
      "days_employed       21525 non-null float64\n",
      "dob_years           21525 non-null float64\n",
      "education           21525 non-null object\n",
      "education_id        21525 non-null int64\n",
      "family_status       21525 non-null object\n",
      "family_status_id    21525 non-null int64\n",
      "gender              21525 non-null object\n",
      "income_type         21525 non-null object\n",
      "debt                21525 non-null int64\n",
      "total_income        21525 non-null float64\n",
      "purpose             21525 non-null object\n",
      "dtypes: float64(3), int64(4), object(5)\n",
      "memory usage: 2.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info() # посмотрим на типы данных в столбцах"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Все числовые данные представлены целыми числами или числами с плавающей точкой, а все объекты - объектами, ничего менять не нужно. Если бы такая необходимость была, я бы воспользовалась методом .astype('int'). Некоторые значения float можно округлить до целых чисел и тогда будет использован .apply(round)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка дубликатов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "женат / замужем          12380\n",
       "гражданский брак          4177\n",
       "Не женат / не замужем     2813\n",
       "в разводе                 1195\n",
       "вдовец / вдова             960\n",
       "Name: family_status, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# посмотрим на список уникальных значений столбца \"education\"\n",
    "df['education'].value_counts()\n",
    "# избавимся от дубликатов\n",
    "df['education'] = df['education'].str.lower()\n",
    "# проверим себя\n",
    "df['education'].value_counts()\n",
    "# теперь \"family_status\"\n",
    "display(df['family_status'].value_counts())\n",
    "# здесь дубликатов нет\n",
    "df['gender'].value_counts()\n",
    "df[df['gender'] == 'XNA'] # ну, пусть будет\n",
    "# нужно удалить явные дубликаты\n",
    "df = df.drop_duplicates().reset_index(drop=True) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Привела к нижнему регистру значения столбца \"education\", возникновение этих дубликатов вполне естественно, если в поле ввода не предусмотрено автоматическое приведение к нижнему регистру. В остальных столбцах типа \"объект\" дубликатов нет. Нашёлся один пропуск в графе \"gender\", но учитывая существование людей, не индентифицирующих свою половую принадлежность, наверное можно оставить его как есть. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Лемматизация"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['покупка   жилье \\n', 'приобретение   автомобиль \\n',\n",
       "       'дополнительный   образование \\n', 'сыграть   свадьба \\n',\n",
       "       'операция   с   жилье \\n', 'образование \\n',\n",
       "       'на   проведение   свадьба \\n', 'покупка   жилье   для   семья \\n',\n",
       "       'покупка   недвижимость \\n',\n",
       "       'покупка   коммерческий   недвижимость \\n',\n",
       "       'покупка   жилой   недвижимость \\n',\n",
       "       'строительство   собственный   недвижимость \\n', 'недвижимость \\n',\n",
       "       'строительство   недвижимость \\n',\n",
       "       'на   покупка   подержать   автомобиль \\n',\n",
       "       'на   покупка   свой   автомобиль \\n',\n",
       "       'операция   с   коммерческий   недвижимость \\n',\n",
       "       'строительство   жилой   недвижимость \\n', 'жилье \\n',\n",
       "       'операция   со   свой   недвижимость \\n', 'автомобиль \\n',\n",
       "       'заниматься   образование \\n',\n",
       "       'сделка   с   подержанный   автомобиль \\n',\n",
       "       'получение   образование \\n', 'свадьба \\n',\n",
       "       'получение   дополнительный   образование \\n',\n",
       "       'покупка   свой   жилье \\n', 'операция   с   недвижимость \\n',\n",
       "       'получение   высокий   образование \\n', 'свой   автомобиль \\n',\n",
       "       'сделка   с   автомобиль \\n', 'профильный   образование \\n',\n",
       "       'высокий   образование \\n', 'покупка   жилье   для   сдача \\n',\n",
       "       'на   покупка   автомобиль \\n', 'ремонт   жилье \\n',\n",
       "       'заниматься   высокий   образование \\n'], dtype=object)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['purpose'].value_counts() #выведем уникальные значения столбца 'purpose'\n",
    "from pymystem3 import Mystem # импорт библиотеки\n",
    "m = Mystem() \n",
    "\n",
    "def purpose_lemmas(purpose): # напишем функцию, которая из заданных значений будет возвращать леммы через пробел\n",
    "    purpose = ' '.join(m.lemmatize(purpose))\n",
    "    return(purpose)\n",
    "\n",
    "df['lemmas'] = df['purpose'].apply(purpose_lemmas) #применим эту функцию к столбцу \"purpose\"\n",
    "\n",
    "display(df['lemmas'].unique()) # посмотрим на леммы в столбце"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После выполнения лемматизации начинают определяться категории целей кредитов: жилье и недвижимость, автомобиль, образование, свадьба, строительство"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Категоризация данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "жилье и недвижимость    10811\n",
       "автомобиль               4306\n",
       "образование              4013\n",
       "свадьба                  2324\n",
       "Name: purpose_group, dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2265604 - максимум 20667 - минимум, 167432 - среднее, 151888 - медиана.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "от 150 000 до 750 000    10852\n",
       "от 75 000 до 150 000      8688\n",
       "менее 75 000              1865\n",
       "750 000 и более             49\n",
       "Name: income_group, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#напишем функцию для категоризации целей кредитов\n",
    "def purpose_category(purpose):\n",
    "    if 'жилье' in purpose or 'недвижимость' in purpose:\n",
    "        return 'жилье и недвижимость'\n",
    "    if 'образование' in purpose:\n",
    "        return 'образование'\n",
    "    if 'свадьба' in purpose:\n",
    "        return 'свадьба'\n",
    "    if 'автомобиль' in purpose or 'машина' in purpose:\n",
    "        return 'автомобиль'\n",
    "    else:\n",
    "        return 'не определена'\n",
    "df['purpose_group'] = df['lemmas'].apply(purpose_category)\n",
    "display(df['purpose_group'].value_counts())\n",
    "#как позже выяснилось, уровень дохода тоже удобнее категоризировать\n",
    "#для начала, нужно понять в каком диапазоне разброс значений\n",
    "max_income = round(df['total_income'].max())\n",
    "min_income = round(df['total_income'].min())\n",
    "mean_income = round(df['total_income'].mean())\n",
    "median_income = round(df['total_income'].median())\n",
    "\n",
    "print(max_income, \"- максимум\", min_income, \"- минимум,\", mean_income, \"- среднее,\", median_income, \"- медиана.\")\n",
    "#чтобы относительно равномерно выделить 4 категории, попробуем разделить медиану пополам, \n",
    "#print(median_income / 2)\n",
    "#print((max_income - median_income) / 2)#а затем найти середину расстояния между медианой и максимумом\n",
    "#округлим значения и получится: 1) до 75 000; 2) от 75 000 до 150 000; 3) от 150 000 до 1 000 000; 4) 1 000 000 и более\n",
    "#попробуем разбить данные на эти категории. В категории более 1 000 000 получается всего 25 значений, \n",
    "# поэтому принято решение опустить верхнее значение до 750 000\n",
    "def income_category(income):\n",
    "    if income < 75000:\n",
    "        return 'менее 75 000'\n",
    "    if income >= 75000 and income < 150000:\n",
    "        return 'от 75 000 до 150 000'\n",
    "    if income >= 150000 and income < 750000:\n",
    "        return 'от 150 000 до 750 000'\n",
    "    if income >= 750000:\n",
    "        return '750 000 и более'\n",
    "df['income_group'] = df['total_income'].apply(income_category)\n",
    "df['income_group'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данные по цели кредита распределены на 4 категории, больше всего кредитов взято с целью покупки или посторойки недвижимости, примерно поровну на автомобили и образование, меньше всего - на организацию свадеб.\n",
    "Разделив данные на категории по доходу, получилось 4 категории:  1) до 75 000; 2) от 75 000 до 150 000; 3) от 150 000 до 750 000; 4) 750 000 и более. Самой многочисленной оказалась категория \"от 75 000 до 150 000\", самой маленькой \"750 000 и более\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 3. Ответьте на вопросы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Есть ли зависимость между наличием детей и возвратом кредита в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  import sys\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>have_children</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>no</td>\n",
       "      <td>0.075438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yes</td>\n",
       "      <td>0.092082</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   debt\n",
       "have_children          \n",
       "no             0.075438\n",
       "yes            0.092082"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "children_debt = df[['children', 'debt']] #выделим фрагмент таблицы, содержащий столбцы 'children' и 'debt'\n",
    "def have_children(child): # напишем функцию которая разделит строки в таблице на 2 группы: с детьми и без\n",
    "    if child > 0:\n",
    "        return 'yes'\n",
    "    else:\n",
    "        return 'no'\n",
    "children_debt['have_children'] = children_debt['children'].apply(have_children) #применим её к выделенному фрагменту датасета\n",
    "#напечатаем сводную таблицу по доле должников\n",
    "pd.pivot_table(children_debt, index=[\"have_children\"], values=['debt'], aggfunc='mean')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Получается так, что люди с детьми имеют задолженность по кредиту чаще, 9,2% против 7,5%. Зависимость небольшая, но есть."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Есть ли зависимость между семейным положением и возвратом кредита в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>family_status</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Не женат / не замужем</td>\n",
       "      <td>0.097509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>гражданский брак</td>\n",
       "      <td>0.093471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>женат / замужем</td>\n",
       "      <td>0.075452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>в разводе</td>\n",
       "      <td>0.071130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>вдовец / вдова</td>\n",
       "      <td>0.065693</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           debt\n",
       "family_status                  \n",
       "Не женат / не замужем  0.097509\n",
       "гражданский брак       0.093471\n",
       "женат / замужем        0.075452\n",
       "в разводе              0.071130\n",
       "вдовец / вдова         0.065693"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# выберем столбцы, содержащие информацию по наличию задолженности и о семейном положении\n",
    "family_debt = df[['family_status', 'debt']] \n",
    "#напечатаем сводную таблицу по доле должников\n",
    "pd.pivot_table(family_debt, index=[\"family_status\"], values=['debt'], aggfunc='mean').sort_values(by='debt', ascending=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Среди неженатых и проживающих совместно без регистрации должников больше, чем среди женатых, разведенных и вдовцов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Есть ли зависимость между уровнем дохода и возвратом кредита в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>income_group</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>от 75 000 до 150 000</td>\n",
       "      <td>0.085635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>750 000 и более</td>\n",
       "      <td>0.081633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>от 150 000 до 750 000</td>\n",
       "      <td>0.078972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>менее 75 000</td>\n",
       "      <td>0.072922</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           debt\n",
       "income_group                   \n",
       "от 75 000 до 150 000   0.085635\n",
       "750 000 и более        0.081633\n",
       "от 150 000 до 750 000  0.078972\n",
       "менее 75 000           0.072922"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# выберем столбцы, содержащие информацию о наличии задолженности и об уровне дохода\n",
    "income_debt = df[['income_group', 'debt']]\n",
    "#напечатаем сводную таблицу по доле должников\n",
    "pd.pivot_table(income_debt, index=[\"income_group\"], values=['debt'], aggfunc='mean').sort_values(by='debt', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Это сложный вопрос, т.к. некоторые доходы были усреднены в процессе предобработки данных, однако процент должников почти не отличается в зависимости от уровня дохода. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Как разные цели кредита влияют на его возврат в срок?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>debt</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>purpose_group</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>автомобиль</td>\n",
       "      <td>0.093590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>образование</td>\n",
       "      <td>0.092200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>свадьба</td>\n",
       "      <td>0.080034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>жилье и недвижимость</td>\n",
       "      <td>0.072334</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          debt\n",
       "purpose_group                 \n",
       "автомобиль            0.093590\n",
       "образование           0.092200\n",
       "свадьба               0.080034\n",
       "жилье и недвижимость  0.072334"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# выберем столбцы, содержащие информацию о наличии задолженности и о цели кредита\n",
    "purpose_debt = df[['purpose_group', 'debt']]\n",
    "#напечатаем сводную таблицу по доле должников\n",
    "pd.pivot_table(purpose_debt, index=[\"purpose_group\"], values=['debt'], aggfunc='mean').sort_values(by='debt', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Если верить данным сводной таблицы, можно предположить, что больше всего должников среди тех, кто берет кредит на покупку автомобиля, меньше всего - на покупку и постройку недвижимости"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Шаг 4. Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Исходя из данных, представленных в таблице, можно сделать вывод о том, что чаще всего имеют задолженность по кредиту люди с детьми, холостые или состоящие в граждаском браке, берущие кредит на покупку автомобиля или на получение образования, наличие задолженности по кредиту не имеет явной связи с уровнем дохода. Однако имеющихся в моем арсенале способов работы с данными в pandas явно недостаточно, чтобы полноценно проанализировать представленные данные."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\"> <b>Комментарий студента:\n",
    "Спасибо! На самом деле долго мучил вопрос о критериях достоверности разницы в аналитике, например в науке используется р-критерий, который высчитывается исходя из объема выборки и типа данных. Мы его не использовали, потому что ещё не проходили в курсе или в аналитике им не пользуются?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-success\">\n",
    "<b>Комментарий ревьюера:</b>\n",
    "    \n",
    "Если ты имеешь в виду `p-value`, то его скоро тоже будем проходить, и он используется также в аналитке)"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 691,
    "start_time": "2021-12-14T09:11:44.000Z"
   },
   {
    "duration": 65,
    "start_time": "2021-12-14T09:13:01.650Z"
   },
   {
    "duration": 77,
    "start_time": "2021-12-14T09:24:03.584Z"
   },
   {
    "duration": 57,
    "start_time": "2021-12-14T09:24:22.281Z"
   },
   {
    "duration": 65,
    "start_time": "2021-12-14T09:24:43.519Z"
   },
   {
    "duration": 71,
    "start_time": "2021-12-14T09:31:10.942Z"
   },
   {
    "duration": 9,
    "start_time": "2021-12-14T09:42:29.212Z"
   },
   {
    "duration": 13,
    "start_time": "2021-12-14T09:46:22.871Z"
   },
   {
    "duration": 14,
    "start_time": "2021-12-14T10:08:29.870Z"
   },
   {
    "duration": 400,
    "start_time": "2021-12-14T10:16:50.099Z"
   },
   {
    "duration": 22,
    "start_time": "2021-12-14T10:18:24.268Z"
   },
   {
    "duration": 7,
    "start_time": "2021-12-14T10:20:17.685Z"
   },
   {
    "duration": 7,
    "start_time": "2021-12-14T10:20:33.042Z"
   },
   {
    "duration": 11,
    "start_time": "2021-12-14T10:20:50.855Z"
   },
   {
    "duration": 9,
    "start_time": "2021-12-14T10:21:05.647Z"
   },
   {
    "duration": 355,
    "start_time": "2021-12-15T08:28:31.582Z"
   },
   {
    "duration": 884,
    "start_time": "2021-12-15T08:28:47.581Z"
   },
   {
    "duration": 364,
    "start_time": "2021-12-15T08:28:58.063Z"
   },
   {
    "duration": 40,
    "start_time": "2021-12-15T08:29:23.592Z"
   },
   {
    "duration": 99,
    "start_time": "2021-12-15T08:32:31.963Z"
   },
   {
    "duration": 108,
    "start_time": "2021-12-15T08:33:05.057Z"
   },
   {
    "duration": 96,
    "start_time": "2021-12-15T08:33:32.718Z"
   },
   {
    "duration": 117,
    "start_time": "2021-12-15T08:40:19.077Z"
   },
   {
    "duration": 356,
    "start_time": "2021-12-15T08:52:29.347Z"
   },
   {
    "duration": 50,
    "start_time": "2021-12-15T08:53:32.728Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-15T08:57:18.274Z"
   },
   {
    "duration": 22,
    "start_time": "2021-12-15T08:57:56.721Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-15T08:58:01.163Z"
   },
   {
    "duration": 25,
    "start_time": "2021-12-15T09:06:30.768Z"
   },
   {
    "duration": 291,
    "start_time": "2021-12-15T09:08:07.158Z"
   },
   {
    "duration": 284,
    "start_time": "2021-12-15T09:08:43.534Z"
   },
   {
    "duration": 290,
    "start_time": "2021-12-15T09:09:28.489Z"
   },
   {
    "duration": 313,
    "start_time": "2021-12-15T09:09:42.586Z"
   },
   {
    "duration": 288,
    "start_time": "2021-12-15T09:10:01.344Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-15T09:10:23.527Z"
   },
   {
    "duration": 28,
    "start_time": "2021-12-15T09:35:30.869Z"
   },
   {
    "duration": 331,
    "start_time": "2021-12-15T09:44:31.171Z"
   },
   {
    "duration": 32,
    "start_time": "2021-12-15T09:44:42.187Z"
   },
   {
    "duration": 276,
    "start_time": "2021-12-15T09:46:58.871Z"
   },
   {
    "duration": 325,
    "start_time": "2021-12-15T09:47:09.123Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-15T09:48:53.173Z"
   },
   {
    "duration": 34,
    "start_time": "2021-12-15T10:01:10.347Z"
   },
   {
    "duration": 60,
    "start_time": "2021-12-15T10:01:37.493Z"
   },
   {
    "duration": 396,
    "start_time": "2021-12-15T10:14:54.013Z"
   },
   {
    "duration": 45709,
    "start_time": "2021-12-15T10:16:37.175Z"
   },
   {
    "duration": 45707,
    "start_time": "2021-12-15T10:16:46.217Z"
   },
   {
    "duration": 7842,
    "start_time": "2021-12-15T10:17:51.491Z"
   },
   {
    "duration": 29,
    "start_time": "2021-12-15T10:19:23.204Z"
   },
   {
    "duration": 31,
    "start_time": "2021-12-15T10:19:40.080Z"
   },
   {
    "duration": 28,
    "start_time": "2021-12-15T10:20:06.602Z"
   },
   {
    "duration": 304,
    "start_time": "2021-12-16T09:26:38.836Z"
   },
   {
    "duration": 700,
    "start_time": "2021-12-16T09:26:58.431Z"
   },
   {
    "duration": 45275,
    "start_time": "2021-12-16T09:26:27.299Z"
   },
   {
    "duration": 7541,
    "start_time": "2021-12-16T09:27:21.299Z"
   },
   {
    "duration": 27,
    "start_time": "2021-12-16T09:34:41.146Z"
   },
   {
    "duration": 9620,
    "start_time": "2021-12-16T09:41:09.106Z"
   },
   {
    "duration": 8703,
    "start_time": "2021-12-16T09:43:03.978Z"
   },
   {
    "duration": 7616,
    "start_time": "2021-12-16T10:16:59.259Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-16T10:18:16.175Z"
   },
   {
    "duration": 22,
    "start_time": "2021-12-16T10:19:36.476Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-16T10:19:54.804Z"
   },
   {
    "duration": 6831,
    "start_time": "2021-12-16T10:22:11.186Z"
   },
   {
    "duration": 7179,
    "start_time": "2021-12-16T10:22:41.955Z"
   },
   {
    "duration": 6784,
    "start_time": "2021-12-16T10:23:09.737Z"
   },
   {
    "duration": 32,
    "start_time": "2021-12-16T10:23:27.267Z"
   },
   {
    "duration": 6880,
    "start_time": "2021-12-16T10:24:30.655Z"
   },
   {
    "duration": 28,
    "start_time": "2021-12-16T10:26:41.525Z"
   },
   {
    "duration": 96,
    "start_time": "2021-12-16T10:44:11.518Z"
   },
   {
    "duration": 7278,
    "start_time": "2021-12-16T10:44:24.595Z"
   },
   {
    "duration": 8345,
    "start_time": "2021-12-16T10:44:59.732Z"
   },
   {
    "duration": 27,
    "start_time": "2021-12-16T10:51:53.248Z"
   },
   {
    "duration": 1878,
    "start_time": "2021-12-16T10:55:06.520Z"
   },
   {
    "duration": 1881,
    "start_time": "2021-12-16T10:56:23.436Z"
   },
   {
    "duration": 3357,
    "start_time": "2021-12-16T10:59:00.267Z"
   },
   {
    "duration": 2249,
    "start_time": "2021-12-16T10:59:27.550Z"
   },
   {
    "duration": 1822,
    "start_time": "2021-12-16T11:03:46.164Z"
   },
   {
    "duration": 21,
    "start_time": "2021-12-16T11:04:59.830Z"
   },
   {
    "duration": 21,
    "start_time": "2021-12-16T11:05:45.946Z"
   },
   {
    "duration": 26,
    "start_time": "2021-12-16T11:06:14.661Z"
   },
   {
    "duration": 29,
    "start_time": "2021-12-16T11:07:54.587Z"
   },
   {
    "duration": 36,
    "start_time": "2021-12-16T11:08:27.328Z"
   },
   {
    "duration": 30,
    "start_time": "2021-12-16T11:09:43.046Z"
   },
   {
    "duration": 53,
    "start_time": "2021-12-16T11:10:37.145Z"
   },
   {
    "duration": 97,
    "start_time": "2021-12-16T11:11:46.981Z"
   },
   {
    "duration": 1806,
    "start_time": "2021-12-16T11:11:54.036Z"
   },
   {
    "duration": 286,
    "start_time": "2021-12-16T11:14:40.664Z"
   },
   {
    "duration": 283,
    "start_time": "2021-12-16T11:17:03.807Z"
   },
   {
    "duration": 34,
    "start_time": "2021-12-16T11:18:09.322Z"
   },
   {
    "duration": 44,
    "start_time": "2021-12-16T11:18:47.786Z"
   },
   {
    "duration": 126,
    "start_time": "2021-12-16T11:19:36.985Z"
   },
   {
    "duration": 138,
    "start_time": "2021-12-16T11:20:03.475Z"
   },
   {
    "duration": 77,
    "start_time": "2021-12-16T11:21:21.803Z"
   },
   {
    "duration": 1824,
    "start_time": "2021-12-16T11:21:56.350Z"
   },
   {
    "duration": 46,
    "start_time": "2021-12-16T11:23:04.837Z"
   },
   {
    "duration": 98,
    "start_time": "2021-12-16T11:27:59.106Z"
   },
   {
    "duration": 67,
    "start_time": "2021-12-16T11:28:42.477Z"
   },
   {
    "duration": 70,
    "start_time": "2021-12-16T11:29:36.710Z"
   },
   {
    "duration": 1895,
    "start_time": "2021-12-16T11:30:17.501Z"
   },
   {
    "duration": 76,
    "start_time": "2021-12-16T11:31:15.740Z"
   },
   {
    "duration": 86,
    "start_time": "2021-12-16T11:31:50.602Z"
   },
   {
    "duration": 108,
    "start_time": "2021-12-16T11:31:57.009Z"
   },
   {
    "duration": 109,
    "start_time": "2021-12-16T11:32:52.764Z"
   },
   {
    "duration": 89,
    "start_time": "2021-12-16T11:33:04.130Z"
   },
   {
    "duration": 62,
    "start_time": "2021-12-16T11:33:43.129Z"
   },
   {
    "duration": 97,
    "start_time": "2021-12-16T11:34:01.091Z"
   },
   {
    "duration": 69,
    "start_time": "2021-12-16T11:35:08.265Z"
   },
   {
    "duration": 663,
    "start_time": "2021-12-16T11:35:53.556Z"
   },
   {
    "duration": 85,
    "start_time": "2021-12-16T11:35:54.220Z"
   },
   {
    "duration": 709,
    "start_time": "2021-12-16T11:36:53.744Z"
   },
   {
    "duration": 73,
    "start_time": "2021-12-16T11:36:54.456Z"
   },
   {
    "duration": 1853,
    "start_time": "2021-12-16T11:38:25.645Z"
   },
   {
    "duration": 660,
    "start_time": "2021-12-16T11:38:42.771Z"
   },
   {
    "duration": 2420,
    "start_time": "2021-12-16T11:38:43.433Z"
   },
   {
    "duration": 1761,
    "start_time": "2021-12-16T11:51:46.195Z"
   },
   {
    "duration": 82,
    "start_time": "2021-12-16T11:53:46.157Z"
   },
   {
    "duration": 110,
    "start_time": "2021-12-16T12:00:58.465Z"
   },
   {
    "duration": 116,
    "start_time": "2021-12-16T12:04:23.317Z"
   },
   {
    "duration": 56,
    "start_time": "2021-12-16T12:08:29.449Z"
   },
   {
    "duration": 51,
    "start_time": "2021-12-16T12:10:32.600Z"
   },
   {
    "duration": 47,
    "start_time": "2021-12-16T12:10:57.530Z"
   },
   {
    "duration": 48,
    "start_time": "2021-12-16T12:16:52.677Z"
   },
   {
    "duration": 64,
    "start_time": "2021-12-16T12:17:41.095Z"
   },
   {
    "duration": 59,
    "start_time": "2021-12-16T12:20:29.735Z"
   },
   {
    "duration": 31,
    "start_time": "2021-12-16T12:23:23.030Z"
   },
   {
    "duration": 34,
    "start_time": "2021-12-16T12:24:02.953Z"
   },
   {
    "duration": 33,
    "start_time": "2021-12-16T12:24:36.148Z"
   },
   {
    "duration": 37,
    "start_time": "2021-12-16T12:29:23.166Z"
   },
   {
    "duration": 40,
    "start_time": "2021-12-16T12:30:31.653Z"
   },
   {
    "duration": 89,
    "start_time": "2021-12-16T12:30:59.136Z"
   },
   {
    "duration": 48,
    "start_time": "2021-12-16T12:31:15.981Z"
   },
   {
    "duration": 41,
    "start_time": "2021-12-16T12:33:00.541Z"
   },
   {
    "duration": 47,
    "start_time": "2021-12-16T12:33:31.658Z"
   },
   {
    "duration": 38,
    "start_time": "2021-12-16T12:34:18.182Z"
   },
   {
    "duration": 41,
    "start_time": "2021-12-16T12:34:43.876Z"
   },
   {
    "duration": 50,
    "start_time": "2021-12-16T12:35:32.546Z"
   },
   {
    "duration": 40,
    "start_time": "2021-12-16T12:36:23.747Z"
   },
   {
    "duration": 37,
    "start_time": "2021-12-16T12:36:39.296Z"
   },
   {
    "duration": 38,
    "start_time": "2021-12-16T12:37:10.121Z"
   },
   {
    "duration": 47,
    "start_time": "2021-12-16T12:38:04.002Z"
   },
   {
    "duration": 44,
    "start_time": "2021-12-16T12:38:28.037Z"
   },
   {
    "duration": 691,
    "start_time": "2021-12-16T12:38:51.661Z"
   },
   {
    "duration": 53,
    "start_time": "2021-12-16T12:38:52.353Z"
   },
   {
    "duration": 640,
    "start_time": "2021-12-16T12:39:36.603Z"
   },
   {
    "duration": 46,
    "start_time": "2021-12-16T12:39:37.245Z"
   },
   {
    "duration": 719,
    "start_time": "2021-12-16T12:40:44.190Z"
   },
   {
    "duration": 55,
    "start_time": "2021-12-16T12:40:44.911Z"
   },
   {
    "duration": 70,
    "start_time": "2021-12-16T12:42:21.087Z"
   },
   {
    "duration": 740,
    "start_time": "2021-12-16T12:42:42.915Z"
   },
   {
    "duration": 73,
    "start_time": "2021-12-16T12:42:43.657Z"
   },
   {
    "duration": 61,
    "start_time": "2021-12-16T12:43:39.468Z"
   },
   {
    "duration": 99,
    "start_time": "2021-12-16T12:51:07.540Z"
   },
   {
    "duration": 111,
    "start_time": "2021-12-16T12:52:24.908Z"
   },
   {
    "duration": 431,
    "start_time": "2021-12-16T12:58:50.431Z"
   },
   {
    "duration": 655,
    "start_time": "2021-12-16T12:59:35.177Z"
   },
   {
    "duration": 356,
    "start_time": "2021-12-16T13:00:17.056Z"
   },
   {
    "duration": 378,
    "start_time": "2021-12-16T13:02:49.774Z"
   },
   {
    "duration": 356,
    "start_time": "2021-12-16T13:03:37.842Z"
   },
   {
    "duration": 390,
    "start_time": "2021-12-16T13:04:08.301Z"
   },
   {
    "duration": 2538,
    "start_time": "2021-12-16T13:08:10.257Z"
   },
   {
    "duration": 406,
    "start_time": "2021-12-16T13:09:00.511Z"
   },
   {
    "duration": 124,
    "start_time": "2021-12-16T13:10:22.049Z"
   },
   {
    "duration": 242,
    "start_time": "2021-12-16T13:10:56.782Z"
   },
   {
    "duration": 87,
    "start_time": "2021-12-16T13:11:59.718Z"
   },
   {
    "duration": 188,
    "start_time": "2021-12-16T13:12:21.926Z"
   },
   {
    "duration": 128,
    "start_time": "2021-12-16T13:12:50.480Z"
   },
   {
    "duration": 98,
    "start_time": "2021-12-16T13:13:10.017Z"
   },
   {
    "duration": 129,
    "start_time": "2021-12-16T13:13:21.519Z"
   },
   {
    "duration": 357,
    "start_time": "2021-12-16T13:13:57.517Z"
   },
   {
    "duration": 137,
    "start_time": "2021-12-16T13:18:42.268Z"
   },
   {
    "duration": 11,
    "start_time": "2021-12-16T13:25:02.175Z"
   },
   {
    "duration": 21,
    "start_time": "2021-12-16T13:28:00.236Z"
   },
   {
    "duration": 17,
    "start_time": "2021-12-16T13:37:10.841Z"
   },
   {
    "duration": 16,
    "start_time": "2021-12-16T13:37:29.333Z"
   },
   {
    "duration": 10,
    "start_time": "2021-12-16T13:38:40.588Z"
   },
   {
    "duration": 7,
    "start_time": "2021-12-16T13:46:46.248Z"
   },
   {
    "duration": 19,
    "start_time": "2021-12-16T13:50:06.599Z"
   },
   {
    "duration": 28,
    "start_time": "2021-12-16T13:51:44.735Z"
   },
   {
    "duration": 25,
    "start_time": "2021-12-16T13:53:05.244Z"
   },
   {
    "duration": 34,
    "start_time": "2021-12-16T13:54:33.078Z"
   },
   {
    "duration": 675,
    "start_time": "2021-12-16T13:57:43.181Z"
   },
   {
    "duration": 124,
    "start_time": "2021-12-16T13:57:43.858Z"
   },
   {
    "duration": 19,
    "start_time": "2021-12-16T13:57:43.983Z"
   },
   {
    "duration": 30,
    "start_time": "2021-12-16T13:57:44.004Z"
   },
   {
    "duration": 36,
    "start_time": "2021-12-16T13:59:59.657Z"
   },
   {
    "duration": 385,
    "start_time": "2021-12-16T14:00:29.400Z"
   },
   {
    "duration": 6865,
    "start_time": "2021-12-16T14:00:40.088Z"
   },
   {
    "duration": 7988,
    "start_time": "2021-12-16T14:00:47.355Z"
   },
   {
    "duration": 37,
    "start_time": "2021-12-16T14:01:17.519Z"
   },
   {
    "duration": 49,
    "start_time": "2021-12-16T14:01:30.419Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-16T14:19:20.223Z"
   },
   {
    "duration": 12,
    "start_time": "2021-12-16T14:28:04.478Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-16T14:28:18.402Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-16T14:28:23.210Z"
   },
   {
    "duration": 10,
    "start_time": "2021-12-16T14:28:47.740Z"
   },
   {
    "duration": 349,
    "start_time": "2021-12-16T14:29:56.289Z"
   },
   {
    "duration": 278,
    "start_time": "2021-12-16T14:30:44.706Z"
   },
   {
    "duration": 607,
    "start_time": "2021-12-16T20:21:11.630Z"
   },
   {
    "duration": 849,
    "start_time": "2021-12-16T20:21:33.207Z"
   },
   {
    "duration": 215,
    "start_time": "2021-12-16T20:21:34.058Z"
   },
   {
    "duration": 15,
    "start_time": "2021-12-16T20:21:34.276Z"
   },
   {
    "duration": 74,
    "start_time": "2021-12-16T20:21:34.293Z"
   },
   {
    "duration": 393,
    "start_time": "2021-12-16T20:21:34.370Z"
   },
   {
    "duration": 13,
    "start_time": "2021-12-16T20:23:07.550Z"
   },
   {
    "duration": 972,
    "start_time": "2021-12-16T20:23:22.556Z"
   },
   {
    "duration": 1420,
    "start_time": "2021-12-16T20:24:06.254Z"
   },
   {
    "duration": 1370,
    "start_time": "2021-12-16T20:46:50.875Z"
   },
   {
    "duration": 1468,
    "start_time": "2021-12-16T20:47:18.860Z"
   },
   {
    "duration": 1235,
    "start_time": "2021-12-16T20:48:23.191Z"
   },
   {
    "duration": 1416,
    "start_time": "2021-12-16T20:49:03.376Z"
   },
   {
    "duration": 1006,
    "start_time": "2021-12-16T20:49:46.366Z"
   },
   {
    "duration": 992,
    "start_time": "2021-12-16T20:51:05.090Z"
   },
   {
    "duration": 1321,
    "start_time": "2021-12-16T20:51:44.424Z"
   },
   {
    "duration": 999,
    "start_time": "2021-12-16T20:53:24.764Z"
   },
   {
    "duration": 1363,
    "start_time": "2021-12-16T21:00:19.451Z"
   },
   {
    "duration": 317,
    "start_time": "2021-12-17T05:28:41.333Z"
   },
   {
    "duration": 890,
    "start_time": "2021-12-17T05:28:54.043Z"
   },
   {
    "duration": 206,
    "start_time": "2021-12-17T05:28:54.935Z"
   },
   {
    "duration": 14,
    "start_time": "2021-12-17T05:28:55.145Z"
   },
   {
    "duration": 59,
    "start_time": "2021-12-17T05:28:55.168Z"
   },
   {
    "duration": 1314,
    "start_time": "2021-12-17T05:28:55.229Z"
   },
   {
    "duration": 19135,
    "start_time": "2021-12-17T05:30:17.166Z"
   },
   {
    "duration": 19191,
    "start_time": "2021-12-17T05:30:38.347Z"
   },
   {
    "duration": 44376,
    "start_time": "2021-12-17T05:31:44.573Z"
   },
   {
    "duration": 48014,
    "start_time": "2021-12-17T05:34:05.236Z"
   },
   {
    "duration": 101,
    "start_time": "2021-12-17T05:46:48.219Z"
   },
   {
    "duration": 32,
    "start_time": "2021-12-17T05:46:53.984Z"
   },
   {
    "duration": 349,
    "start_time": "2021-12-20T06:48:47.420Z"
   },
   {
    "duration": 245,
    "start_time": "2021-12-20T06:49:23.206Z"
   },
   {
    "duration": 820,
    "start_time": "2021-12-20T06:49:33.233Z"
   },
   {
    "duration": 201,
    "start_time": "2021-12-20T06:49:34.056Z"
   },
   {
    "duration": 14,
    "start_time": "2021-12-20T06:49:34.260Z"
   },
   {
    "duration": 63,
    "start_time": "2021-12-20T06:49:34.277Z"
   },
   {
    "duration": 50183,
    "start_time": "2021-12-20T06:49:34.343Z"
   },
   {
    "duration": 32,
    "start_time": "2021-12-20T06:50:24.528Z"
   },
   {
    "duration": 7,
    "start_time": "2021-12-20T06:53:41.175Z"
   },
   {
    "duration": 6,
    "start_time": "2021-12-20T07:20:10.203Z"
   },
   {
    "duration": 35,
    "start_time": "2021-12-20T07:20:27.527Z"
   },
   {
    "duration": 36,
    "start_time": "2021-12-20T07:21:20.493Z"
   },
   {
    "duration": 36,
    "start_time": "2021-12-20T07:21:26.402Z"
   },
   {
    "duration": 35,
    "start_time": "2021-12-20T07:22:01.055Z"
   },
   {
    "duration": 376,
    "start_time": "2021-12-20T07:23:14.973Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-20T07:24:48.733Z"
   },
   {
    "duration": 239,
    "start_time": "2021-12-20T08:25:19.399Z"
   },
   {
    "duration": 60,
    "start_time": "2021-12-20T08:48:00.182Z"
   },
   {
    "duration": 806,
    "start_time": "2021-12-20T08:48:25.668Z"
   },
   {
    "duration": 223,
    "start_time": "2021-12-20T08:48:26.476Z"
   },
   {
    "duration": 26,
    "start_time": "2021-12-20T08:48:26.702Z"
   },
   {
    "duration": 52,
    "start_time": "2021-12-20T08:48:26.730Z"
   },
   {
    "duration": 33,
    "start_time": "2021-12-20T08:49:18.908Z"
   },
   {
    "duration": 39,
    "start_time": "2021-12-20T08:49:18.943Z"
   },
   {
    "duration": 53503,
    "start_time": "2021-12-20T08:52:39.878Z"
   },
   {
    "duration": 419,
    "start_time": "2021-12-20T09:05:50.968Z"
   },
   {
    "duration": 7,
    "start_time": "2021-12-20T09:07:38.690Z"
   },
   {
    "duration": 9,
    "start_time": "2021-12-20T09:07:57.476Z"
   },
   {
    "duration": 1808,
    "start_time": "2021-12-20T09:08:20.431Z"
   },
   {
    "duration": 13,
    "start_time": "2021-12-20T09:09:51.527Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-20T09:10:28.811Z"
   },
   {
    "duration": 19,
    "start_time": "2021-12-20T09:10:43.222Z"
   },
   {
    "duration": 92,
    "start_time": "2021-12-20T09:16:59.961Z"
   },
   {
    "duration": 253,
    "start_time": "2021-12-20T09:17:06.118Z"
   },
   {
    "duration": 12,
    "start_time": "2021-12-20T09:23:42.776Z"
   },
   {
    "duration": 262,
    "start_time": "2021-12-20T09:24:30.779Z"
   },
   {
    "duration": 537,
    "start_time": "2021-12-20T09:25:11.238Z"
   },
   {
    "duration": 274,
    "start_time": "2021-12-20T09:31:21.408Z"
   },
   {
    "duration": 269,
    "start_time": "2021-12-20T09:31:31.598Z"
   },
   {
    "duration": 18,
    "start_time": "2021-12-20T09:31:58.576Z"
   },
   {
    "duration": 13,
    "start_time": "2021-12-20T09:56:38.730Z"
   },
   {
    "duration": 243,
    "start_time": "2021-12-20T09:57:59.018Z"
   },
   {
    "duration": 6,
    "start_time": "2021-12-20T10:02:51.933Z"
   },
   {
    "duration": 6,
    "start_time": "2021-12-20T10:02:55.615Z"
   },
   {
    "duration": 6,
    "start_time": "2021-12-20T10:03:04.364Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-20T10:04:45.203Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-20T10:04:50.615Z"
   },
   {
    "duration": 18,
    "start_time": "2021-12-20T10:05:40.638Z"
   },
   {
    "duration": 13,
    "start_time": "2021-12-20T10:08:38.909Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-20T10:16:05.803Z"
   },
   {
    "duration": 374,
    "start_time": "2021-12-20T19:49:34.342Z"
   },
   {
    "duration": 666,
    "start_time": "2021-12-20T19:49:52.271Z"
   },
   {
    "duration": 132,
    "start_time": "2021-12-20T19:49:52.939Z"
   },
   {
    "duration": 11,
    "start_time": "2021-12-20T19:49:53.073Z"
   },
   {
    "duration": 40,
    "start_time": "2021-12-20T19:49:53.086Z"
   },
   {
    "duration": 45603,
    "start_time": "2021-12-20T19:49:46.776Z"
   },
   {
    "duration": 45593,
    "start_time": "2021-12-20T19:49:46.787Z"
   },
   {
    "duration": 45580,
    "start_time": "2021-12-20T19:49:46.801Z"
   },
   {
    "duration": 38186,
    "start_time": "2021-12-20T19:54:25.964Z"
   },
   {
    "duration": 273,
    "start_time": "2021-12-20T19:57:07.167Z"
   },
   {
    "duration": 238,
    "start_time": "2021-12-20T20:02:43.870Z"
   },
   {
    "duration": 240,
    "start_time": "2021-12-20T20:02:58.018Z"
   },
   {
    "duration": 242,
    "start_time": "2021-12-20T20:11:48.885Z"
   },
   {
    "duration": 3479,
    "start_time": "2021-12-20T20:12:17.613Z"
   },
   {
    "duration": 18,
    "start_time": "2021-12-20T20:12:55.118Z"
   },
   {
    "duration": 250,
    "start_time": "2021-12-20T20:13:08.460Z"
   },
   {
    "duration": 1184,
    "start_time": "2021-12-20T20:13:25.090Z"
   },
   {
    "duration": 526,
    "start_time": "2021-12-20T20:13:47.918Z"
   },
   {
    "duration": 24,
    "start_time": "2021-12-20T20:14:21.858Z"
   },
   {
    "duration": 24,
    "start_time": "2021-12-20T20:15:35.456Z"
   },
   {
    "duration": 31,
    "start_time": "2021-12-20T20:17:45.594Z"
   },
   {
    "duration": 13,
    "start_time": "2021-12-20T20:25:10.094Z"
   },
   {
    "duration": 257,
    "start_time": "2021-12-20T20:26:01.774Z"
   },
   {
    "duration": 15,
    "start_time": "2021-12-20T20:26:17.403Z"
   },
   {
    "duration": 14,
    "start_time": "2021-12-20T20:26:39.948Z"
   },
   {
    "duration": 24,
    "start_time": "2021-12-20T20:40:33.775Z"
   },
   {
    "duration": 82,
    "start_time": "2021-12-20T20:42:27.102Z"
   },
   {
    "duration": 266,
    "start_time": "2021-12-20T20:42:35.267Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-20T20:42:51.074Z"
   },
   {
    "duration": 422,
    "start_time": "2021-12-20T20:43:21.554Z"
   },
   {
    "duration": 25,
    "start_time": "2021-12-20T20:43:31.414Z"
   },
   {
    "duration": 21,
    "start_time": "2021-12-20T20:44:16.430Z"
   },
   {
    "duration": 17,
    "start_time": "2021-12-20T20:46:39.780Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-20T20:48:01.960Z"
   },
   {
    "duration": 25,
    "start_time": "2021-12-20T20:49:05.561Z"
   },
   {
    "duration": 26,
    "start_time": "2021-12-20T20:55:50.784Z"
   },
   {
    "duration": 18,
    "start_time": "2021-12-20T20:56:10.308Z"
   },
   {
    "duration": 6971,
    "start_time": "2021-12-20T21:09:46.160Z"
   },
   {
    "duration": 6833,
    "start_time": "2021-12-20T21:10:36.370Z"
   },
   {
    "duration": 304,
    "start_time": "2021-12-20T21:11:26.168Z"
   },
   {
    "duration": 279,
    "start_time": "2021-12-20T21:11:59.945Z"
   },
   {
    "duration": 279,
    "start_time": "2021-12-20T21:12:22.923Z"
   },
   {
    "duration": 302,
    "start_time": "2021-12-20T21:13:04.482Z"
   },
   {
    "duration": 37,
    "start_time": "2021-12-20T21:13:49.129Z"
   },
   {
    "duration": 29,
    "start_time": "2021-12-20T21:16:00.325Z"
   },
   {
    "duration": 32,
    "start_time": "2021-12-20T21:17:44.515Z"
   },
   {
    "duration": 34,
    "start_time": "2021-12-20T21:23:36.823Z"
   },
   {
    "duration": 335,
    "start_time": "2021-12-20T21:25:23.795Z"
   },
   {
    "duration": 252,
    "start_time": "2021-12-20T21:26:36.068Z"
   },
   {
    "duration": 277,
    "start_time": "2021-12-20T21:27:06.812Z"
   },
   {
    "duration": 15,
    "start_time": "2021-12-20T21:28:32.802Z"
   },
   {
    "duration": 16,
    "start_time": "2021-12-20T21:31:53.485Z"
   },
   {
    "duration": 860,
    "start_time": "2021-12-21T12:34:37.083Z"
   },
   {
    "duration": 206,
    "start_time": "2021-12-21T12:34:37.946Z"
   },
   {
    "duration": 18,
    "start_time": "2021-12-21T12:34:38.156Z"
   },
   {
    "duration": 49,
    "start_time": "2021-12-21T12:34:38.177Z"
   },
   {
    "duration": 4699,
    "start_time": "2021-12-21T12:34:38.229Z"
   },
   {
    "duration": 62,
    "start_time": "2021-12-21T12:34:42.931Z"
   },
   {
    "duration": 62,
    "start_time": "2021-12-21T12:34:42.996Z"
   },
   {
    "duration": 31,
    "start_time": "2021-12-21T12:34:43.060Z"
   },
   {
    "duration": 54,
    "start_time": "2021-12-21T12:34:43.095Z"
   },
   {
    "duration": 43,
    "start_time": "2021-12-21T12:34:43.152Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-21T12:35:38.083Z"
   },
   {
    "duration": 37,
    "start_time": "2021-12-21T12:37:48.175Z"
   },
   {
    "duration": 471,
    "start_time": "2021-12-21T19:11:56.217Z"
   },
   {
    "duration": 772,
    "start_time": "2021-12-21T19:12:07.782Z"
   },
   {
    "duration": 159,
    "start_time": "2021-12-21T19:12:08.556Z"
   },
   {
    "duration": 8,
    "start_time": "2021-12-21T19:12:08.718Z"
   },
   {
    "duration": 21,
    "start_time": "2021-12-21T19:12:08.728Z"
   },
   {
    "duration": 63,
    "start_time": "2021-12-21T19:12:08.751Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-21T19:12:08.817Z"
   },
   {
    "duration": 4388,
    "start_time": "2021-12-21T19:12:08.839Z"
   },
   {
    "duration": 38,
    "start_time": "2021-12-21T19:12:13.230Z"
   },
   {
    "duration": 50,
    "start_time": "2021-12-21T19:12:13.270Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-21T19:12:13.322Z"
   },
   {
    "duration": 17,
    "start_time": "2021-12-21T19:12:13.344Z"
   },
   {
    "duration": 15,
    "start_time": "2021-12-21T19:12:13.362Z"
   },
   {
    "duration": 51,
    "start_time": "2021-12-21T19:12:24.953Z"
   },
   {
    "duration": 57,
    "start_time": "2021-12-21T19:15:22.983Z"
   },
   {
    "duration": 689,
    "start_time": "2021-12-21T19:29:37.042Z"
   },
   {
    "duration": 140,
    "start_time": "2021-12-21T19:29:37.733Z"
   },
   {
    "duration": 6,
    "start_time": "2021-12-21T19:29:37.875Z"
   },
   {
    "duration": 23,
    "start_time": "2021-12-21T19:29:37.884Z"
   },
   {
    "duration": 46,
    "start_time": "2021-12-21T19:29:37.909Z"
   },
   {
    "duration": 17,
    "start_time": "2021-12-21T19:29:37.957Z"
   },
   {
    "duration": 3949,
    "start_time": "2021-12-21T19:29:37.976Z"
   },
   {
    "duration": 36,
    "start_time": "2021-12-21T19:29:41.927Z"
   },
   {
    "duration": 43,
    "start_time": "2021-12-21T19:29:41.965Z"
   },
   {
    "duration": 15,
    "start_time": "2021-12-21T19:29:42.010Z"
   },
   {
    "duration": 20,
    "start_time": "2021-12-21T19:29:42.026Z"
   },
   {
    "duration": 16,
    "start_time": "2021-12-21T19:29:42.048Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
